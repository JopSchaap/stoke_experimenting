STOKE finds an optimization however for large values this optimization actually 
might cause the program to get stuck in an infinite loop if the step size is small enough.
This is caused by the following transformation
# Text                   #  Line  RIP       Bytes  Opcode                 
.range_sum:              #        0x400610  0      OPC=<label>            
  pxor %xmm2, %xmm2      #  1     0x400610  4      OPC=pxor_xmm_xmm       
  subsd %xmm0, %xmm1     #  2     0x400614  4      OPC=subsd_xmm_xmm      
  testl %edi, %edi       #  3     0x400618  2      OPC=testl_r32_r32      
  pxor %xmm3, %xmm3      #  4     0x40061a  4      OPC=pxor_xmm_xmm       
  cvtsi2sdl %edi, %xmm2  #  5     0x40061e  4      OPC=cvtsi2sdl_xmm_r32  
  divsd %xmm2, %xmm1     #  6     0x400622  4      OPC=divsd_xmm_xmm      
  jle .L_40064b          #  7     0x400626  2      OPC=jle_label          
  xorl %eax, %eax        #  8     0x400628  2      OPC=xorl_r32_r32       
.L_400630:               #        0x40062a  0      OPC=<label>            
  cmpl $0x1, %eax        #  9     0x40062a  3      OPC=cmpl_r32_imm8      
  addsd %xmm0, %xmm3     #  10    0x40062d  4      OPC=addsd_xmm_xmm      <-----This used to be a multiplication with a counting int. 
  cmovnzl %edi, %eax     #  11    0x400631  3      OPC=cmovnzl_r32_r32    
  pxor %xmm2, %xmm2      #  12    0x400634  4      OPC=pxor_xmm_xmm       
  pcmpeqq %xmm2, %xmm1   #  13    0x400638  5      OPC=pcmpeqq_xmm_xmm    <-----Comparison between doubles instead of ints
  jne .L_400630          #  14    0x40063d  2      OPC=jne_label          
.L_40064b:               #        0x40063f  0      OPC=<label>            
  movapd %xmm3, %xmm0    #  15    0x40063f  4      OPC=movapd_xmm_xmm     
  retq                   #  16    0x400643  1      OPC=retq  
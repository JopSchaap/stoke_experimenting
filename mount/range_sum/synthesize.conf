##### /home/stoke/stoke/bin/stoke_search

##### Search Options:

# Annealing constant
# --beta <double>
# Default: 1

# The initial number of instructions in the rewrite.  If the rewrite does not already ahve this many instructions, than NOPs will be added to pad to this number.  Note that some transformations can chance the number of instructions, while many others do not.
# --initial_instruction_number <int>
# Default: 16

# Initial search state
--init target
# --init (empty|zero|target|previous|extension)
# Default: zero

##### Target Options:

# Target code
# --target <path/to/file.s>

##### Cost Function Evaluation Options:

# Give up once cost exceeds this value
# --max_cost <int>
# Default: 4611686018427387903

# The cost function.  Can be an arbitrary expression involving the following constructs:
# - arithmetic operators: + - * / % == << >> < > >= <= & |
# - binsize: Size of the binary
# - correctness: Correctness according to the testcases
# - latency: Latency of the instructions
# - measured: Measured latency (more precise for loops than 'latency')
# - size: The number of instructions
# - sseavx: 1 if both sse and avx instructions are used, 0 otherwise
# - nongoal: 1 if the code is exactly the same as one provided via --non_goal
# --cost <string>
# Default: "correctness+measured"

# Expression to check if code is correct
# --correctness <string>
# Default: "correctness == 0"

##### Correctness Options:

# Metric for measuring distance between states
# --distance (hamming|ulp|extension)
# Default: hamming

# Reduction method
# --reduction (max|sum|extension)
# Default: sum

# Number of bytes in sse elements
# --sse_width (1|2|4|8)
# Default: 8

# Number of values in sse registers
# --sse_count <int>
# Default: 4

# Disallow correct values in incorrect register locations
# --no_relax_reg 

# Allow correct values in incorrect memory locations
# --relax_mem 

# Enables an optimized version of relax_mem that assumes heap writes occur in 128-bit blocks
# --blocked_heap_opt 

# Penalty for correct values in incorrect locations
# --misalign_penalty <int>
# Default: 1

# Penalty for incorrect signal behavior
# --sig_penalty <int>
# Default: 10000

# Minimum ULP value to record
--min_ulp 1000
# Default: 0

##### Input/Output Register/Memory Options:

# Registers defined on entry
# --def_in { %rax %rsp ... }
# Default: { %rax %rcx %rdx %rsi %rdi %r8 %r9 %xmm0 %xmm1 %xmm2 %xmm3 %xmm4 %xmm5 %xmm6 %xmm7 }

# Registers live on exit
# --live_out { %rax %rsp ... }
# Default: { %rax %rdx %xmm0 %xmm1 }

# Is stack defined on exit?
# --stack_out 

# Is heap defined on exit?
# --heap_out 

# Remove the default rounding control bit (%mxcsr[rc]) from def_in
# --no_default_mxcsr 

# Skip sanity checks on def-ins, live-outs, and instruction support.  Useful for verification.
# --live_dangerously 

##### "latency" Cost Function Options:

# Latency multiplier for nested code
# --nesting_penalty <int>
# Default: 5

##### "nongoal" Cost Function Options:

# Directory containing assembly codes that score a value of 1 in the cost-function component 'nongoal'.  Can be used to steer the search towards other codes.
# --non_goal <path/to/dir>

##### Auxiliary Function Options:

# Directory containing helper functions
# --functions <path/to/dir>

# Automatically remove target and unreachable functions from functions directory
# --prune 

##### Sandbox Options:

# Report SIGSEGV for abi violations
# --abi_check 

# Report SIGSEGV for stack smashing violations
# --stack_check 

# Maximum jumps before exit due to infinite loop
--max_jumps 16384
# --max_jumps <int>
# Default: 1024

##### Search State Options:

# Initial rewrite; used with --init previous
# --previous <path/to/file.s>

##### Random Seed Options:

# Random seed for stoke tools; set to zero for random
# --seed <int>
# Default: 0

##### Formal Validator Options:

# SMT Solver backend
# --solver (cvc4|z3)
# Default: z3

# Timeout in milliseconds for SMT solver before giving up.  0 for no limit.
# --solver_timeout <int>
# Default: 0

##### Testcase Options:

# Testcases
# --testcases <path/to/file>

# Shuffle testcase ordering
--shuffle_testcases 

# Subset of testcase indices to use for training sets
--training_set "{ 0 ... 64 }" 
# --training_set { 0 1 ... 9 }
# Default: { 0 ... 3 }

# Subset of testcase indices to use for test sets
# --test_set { 0 1 ... 9 }
# Default: { 0 ... 9999 }

# Subset of testcase indices to use for performance sets
--performance_set "{ 0 ... 64 }"
# --performance_set { 0 1 ... 9 }
# Default: { 0 ... 3 }

# Testcase index
# --index <int>
# Default: 0

##### Transform Pool Options:

# Propose instruction and opcode moves that use this CPU ID flag set
# --cpu_flags { flag1 flag2 ... flagn }
# Default: { fpu tsc msr cx8 sep cmov clflush mmx fxsr sse sse2 syscall rdtscp rep_good nopl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm abm xsaveopt fsgsbase bmi1 hle avx2 bmi2 erms invpcid rtm }

# Don't propose any instructions from this set (takes precedence over --opc_whitelist)
# --opc_blacklist { opcode1 ... opcoden; e.g., xorl_r32_r32 or xor.* (a string for full string matching, or a regular expression) }
# Default: { }

# Only proprose instructions from this set (unless they are not proposed for other reasons, e.g. --opc_blacklist, --propose_call, --cpu_flags, --force_mem_read, --force_mem_write, instructions not supported by stoke, etc.); empty whitelist means no whitelist
# --opc_whitelist { opcode1 ... opcoden; e.g., xorl_r32_r32 or xor.* (a string for full string matching, or a regular expression) }
# Default: { }

# Number of call opcodes in the opcode pool.  If non-zero, takes precedence over --opc_whitelist and --opc_blacklist.
# --call_weight <int>
# Default: 0

# Ban all instructions that use rh registers
# --no_rh 

# Override the value of preserve_regs to the empty set
# --callee_save 

# Only propose rewrites that the STOKE formal validator can support
# --validator_must_support 

# Prevent STOKE from proposing instructions that modify these registers
# --preserve_regs { %rax %rsp ... }
# Default: { %rbx %rsp %rbp %r12 %r13 %r14 %r15 }

# Additional immediates to propose as operands
# --immediates { imm1 imm2 ... }
# Default: { }

# Additional addresses to propose as operands
# --mem_ops { (%rax) (%rdi, %rsp) ... }
# Default: { }

# Additional global rip offsets to propose as operands
# --rips { rip1 rip2 ... }
# Default: { }

##### Bounded Verifier Options:

# Maximum iterations through a loop
# --bound <int>
# Default: 2

# Do not bailout once first counterexample found
# --no_early_bailout 

##### DDEC Verifier Options:

# Do not try to find invariants using sign extension
# --no_try_sign_extend 

# Do not use the bounded validator to refine DDEC invariants.
# --no_ddec_bv 

# Use sound nullspace computation over bitvectors.
# --sound_nullspace 

##### Verification Options:

# Verification strategy
# --strategy (none|bounded|ddec|hold_out)
# Default: "hold_out"

##### Common Formal Validation Options:

# How to handle aliasing
# --alias_strategy (basic|string|string_antialias|flat)
# Default: "flat"

# add constraints to bound index registers away from 32-bit boundary
# --verify_nacl 

##### Transform Weight Options:

# Add Nops proposal mass
# --add_nops_mass <int>
# Default: 0

# Delete proposal mass
# --delete_mass <int>
# Default: 0

# Instruction move proposal mass
# --instruction_mass <int>
# Default: 1

# Opcode move proposal mass
# --opcode_mass <int>
# Default: 1

# Opcode width move proposal mass
# --opcode_width_mass <int>
# Default: 0

# Operand move proposal mass
# --operand_mass <int>
# Default: 1

# Local swap move proposal mass
# --local_swap_mass <int>
# Default: 1

# Global swap move proposal mass
# --global_swap_mass <int>
# Default: 1

# Rotate move proposal mass (previously called "resize")
# --rotate_mass <int>
# Default: 1

##### Output Options:

# File to write successful results to
# --out <path/to/file.s>
# Default: "result.s"

# Path to the directory where new best correct rewrites are being stored.  Rewrites are verified before being stored (using the same verification settings as the final verification).
# --results <path/to/dir>
# Default: ""

# Machine-readable output (result and statistics)
# --machine_output <path/to/file.s>

##### Statistics Options:

# Number of iterations between statistics updates
# --statistics_interval <int>
# Default: 1000000

##### Automation Options:

# Total number of iterations before giving up (across all cycles)
# --timeout_iterations <int>
# Default: 100000000

# Total number of seconds before giving up (across all cycles), or 0 for no timeout
# --timeout_seconds <double>
# Default: 0

# Action to take when the verification at the end fails
# --failed_verification_action (quit|add_counterexample)
# Default: add_counterexample

# The timeout (as number of iterations) per cycle.  Can be a comma-separated list, where the first element is used for the first cycle, and so on.  Can also be an expression involving the variable 'i' that refers to the current cycle (starting at 1); expressions include integer constants, the variable 'i', and binary operators: +, -, *, /, ** (exponentiation), >>, << (shifts), ==, !=, <=, <, >, >= (comparisons), % (modulo), |, & (binary and/or).  The last expression in the list is used for all following cycles.
# --cycle_timeout <string>
# Default: "10000, 10000, 10000, 10000, 10000, 2**i * 1000"

# Postprocessing of the program found by STOKE (simple removes nops and unreachable blocks, and full additionally removes redundant statements without side-effects)
# --postprocessing (none|simple|full)
# Default: full

# Don't show a progress update whenever a new best program is discovered
# --no_progress_update 
--no_progress_update 

##### Help and argument utilities:

# Print this message and quit
# --help 

# Print program arguments and quit
# --debug_args 

# Read program args from a configuration file
# --config <path/to/file.conf>

# Print an example configuration file
# --example_config <path/to/file.conf>

--def_in "{ %xmm0 %xmm1 %edi }" # The registers that are defined on entry to the target
--live_out "{ %xmm0 %xmm1 }" # The registers that are live on exit from the target

--test_set "{ 266 ... 4095 }"  # Testcases to use as holdout set for checking correctness

--distance ulp # Metric for measuring error between live-outs
--misalign_penalty 1 # Penalty for results that appear in the wrong location
--reduction sum # Method for summing errors across testcases
--sig_penalty 9999 # Score to assign to rewrites that produce non-zero signals

--cost "correctness + latency" # Measure performance by summing instruction latencies

#--global_swap_mass 1 # Proposal mass
#--instruction_mass 1 # Proposal mass
#--local_swap_mass 1 # Proposal mass
#--opcode_mass 1 # Proposal mass
#--operand_mass 1 # Proposal mass
#--rotate_mass 1 # Proposal mass

--beta 1 # Search annealing constant
--initial_instruction_number 10 # The number of nops to start with

--statistics_interval 100000 # Print statistics every 100k proposals
--timeout_iterations 5000000 # Propose 16m modifications total before giving up
--cycle_timeout 500000 # Try 1m modifications before restarting

--strategy hold_out

# --strategy bounded

#--strategy none # Verify results using a larger hold out testcase set
# --failed_verification_action quit
